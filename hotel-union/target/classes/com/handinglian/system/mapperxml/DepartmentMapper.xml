<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.handinglian.system.mapper.DepartmentMapper">
  <resultMap id="BaseResultMap" type="com.handinglian.system.entity.Department">
    <!--@mbg.generated-->
    <id column="department_id" jdbcType="INTEGER" property="departmentId" />
    <result column="department_name" jdbcType="VARCHAR" property="departmentName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="valid" jdbcType="TINYINT" property="valid" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    department_id, department_name, create_time, update_time, `valid`
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from department
    where department_id = #{departmentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from department
    where department_id = #{departmentId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="department_id" keyProperty="departmentId" parameterType="com.handinglian.system.entity.Department" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into department (department_name, create_time, update_time, 
      `valid`)
    values (#{departmentName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{valid,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" keyColumn="department_id" keyProperty="departmentId" parameterType="com.handinglian.system.entity.Department" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into department
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="departmentName != null and departmentName != ''">
        department_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="valid != null">
        `valid`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="departmentName != null and departmentName != ''">
        #{departmentName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="valid != null">
        #{valid,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.handinglian.system.entity.Department">
    <!--@mbg.generated-->
    update department
    <set>
      <if test="departmentName != null and departmentName != ''">
        department_name = #{departmentName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="valid != null">
        `valid` = #{valid,jdbcType=TINYINT},
      </if>
    </set>
    where department_id = #{departmentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.handinglian.system.entity.Department">
    <!--@mbg.generated-->
    update department
    set department_name = #{departmentName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      `valid` = #{valid,jdbcType=TINYINT}
    where department_id = #{departmentId,jdbcType=INTEGER}
  </update>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update department
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="department_name = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when department_id = #{item.departmentId,jdbcType=INTEGER} then #{item.departmentName,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when department_id = #{item.departmentId,jdbcType=INTEGER} then #{item.createTime,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when department_id = #{item.departmentId,jdbcType=INTEGER} then #{item.updateTime,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
      <trim prefix="`valid` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when department_id = #{item.departmentId,jdbcType=INTEGER} then #{item.valid,jdbcType=TINYINT}
        </foreach>
      </trim>
    </trim>
    where department_id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.departmentId,jdbcType=INTEGER}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="department_id" keyProperty="departmentId" parameterType="map" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into department
    (department_name, create_time, update_time, `valid`)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.departmentName,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.valid,jdbcType=TINYINT})
    </foreach>
  </insert>
  <insert id="insertOrUpdate" keyColumn="department_id" keyProperty="departmentId" parameterType="com.handinglian.system.entity.Department" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into department
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="departmentId != null">
        department_id,
      </if>
      department_name,
      create_time,
      update_time,
      `valid`,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
      #{departmentName,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP},
      #{valid,jdbcType=TINYINT},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
      department_name = #{departmentName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      `valid` = #{valid,jdbcType=TINYINT},
    </trim>
  </insert>
  <insert id="insertOrUpdateSelective" keyColumn="department_id" keyProperty="departmentId" parameterType="com.handinglian.system.entity.Department" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into department
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="departmentId != null">
        department_id,
      </if>
      <if test="departmentName != null">
        department_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="valid != null">
        `valid`,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="departmentName != null">
        #{departmentName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="valid != null">
        #{valid,jdbcType=TINYINT},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="departmentName != null">
        department_name = #{departmentName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="valid != null">
        `valid` = #{valid,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>

<!--auto generated by MybatisCodeHelper on 2019-06-25-->
  <select id="findInvalidOneByDepartmentName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from department
        where department_name=#{departmentName,jdbcType=VARCHAR} and valid=0
    </select>

<!--auto generated by MybatisCodeHelper on 2019-06-25-->
  <select id="findOneByDepartmentName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from department
    where department_name=#{departmentName,jdbcType=VARCHAR} and valid=1
  </select>

<!--auto generated by MybatisCodeHelper on 2019-06-25-->
  <select id="find" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from department
  </select>
</mapper>